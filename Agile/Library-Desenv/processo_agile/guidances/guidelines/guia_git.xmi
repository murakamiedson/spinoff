<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmi:id="-diGqa139I1UPirqu8p_GVw" name="new_guideline,_2HQHICM7Ee-5BoBWlxDHwg" guid="-diGqa139I1UPirqu8p_GVw" changeDate="2024-06-12T10:15:04.933-0300">
  <mainDescription>&lt;h2>&#xD;
    Guia - Git e GitHub&#xD;
&lt;/h2>&#xD;
&lt;h3>&#xD;
    Definições:&#xD;
&lt;/h3>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Git: Software para controle de versão e revisão de código&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        GitHub: Plataforma de hospedagem de código-fonte utilizando o controle de versão do Git&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;hr />&#xD;
&lt;p>&#xD;
    Para utilizar o Git de forma eficiente, é necessário seguir uma estrutura conhecida como Git Flow. O Git Flow é um&#xD;
    modelo de branch que define como as branches devem ser criadas e mescladas. Com isso, podemos utilizar o GitHub para&#xD;
    hospedar o código e gerenciar as mudanças.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    1. Configuração do Git:&#xD;
&lt;/h3>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        &lt;b>Instalar o Git:&lt;/b>&lt;br />&#xD;
        Baixe o Git e Instale seguindo as instruções contidas em &lt;a&#xD;
        href=&quot;https://git-scm.com/downloads&quot;>https://git-scm.com/downloads&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Criar conta no GitHub:&lt;/b>&lt;br />&#xD;
        Crie uma conta no GitHub e faça login&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Criar repositório no GitHub:&lt;/b>&lt;br />&#xD;
        Crie um repositório no GitHub, seguindo as instruções contidas em &lt;a&#xD;
        href=&quot;https://docs.github.com/pt/repositories/creating-and-managing-repositories/quickstart-for-repositories&quot;>https://docs.github.com/pt/repositories/creating-and-managing-repositories/quickstart-for-repositories&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Configuração da Conta do GitHub no Git (local):&lt;/b>&lt;br />&#xD;
        Para configurar utilizando SSH, siga as instruções contidas em &lt;a&#xD;
        href=&quot;https://docs.github.com/pt/authentication/connecting-to-github-with-ssh&quot;>https://docs.github.com/pt/authentication/connecting-to-github-with-ssh&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Configuração do Repositório Local:&lt;/b>&lt;br />&#xD;
        Para começarmos a trabalhar com o repositório localmente, precisamos clonar o repositório do GitHub. Para isso,&#xD;
        siga as instruções: &#xD;
        &lt;ol>&#xD;
            &lt;li>&#xD;
                Obtenha a URL do repositório do GitHub:&lt;br />&#xD;
                Você irá encontrar a URL na página do repositório no GitHub. A URL é composta por:&lt;br />&#xD;
                &lt;code>https://github.com/&lt;b>usuário&lt;/b>/&lt;b>repositório&lt;/b>.git&lt;/code>&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Clone o repositório:&lt;br />&#xD;
                Navegue até a pasta em que os arquivos do projeto serão criados. Abra o Git Bash/Terminal e digite o&#xD;
                comando abaixo para clonar o repositório:&lt;br />&#xD;
                &lt;code>git clone &lt;b>URL do repositório&lt;/b>&lt;/code>&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Adicionando o repositório ao Git e GitHub:&lt;br />&#xD;
                &lt;ul>&#xD;
                    &lt;li>&#xD;
                        Caso o projeto já exista:&lt;br />&#xD;
                        Se o projeto já existir, copie os arquivos do projeto e cole na pasta que acabamos de clonar.&lt;br />&#xD;
                        Em seguida, no Git Bash/Terminal, digite os comandos:&lt;br />&#xD;
                        &lt;code>git add .&lt;/code> (adiciona todos os arquivos)&lt;br />&#xD;
                        &lt;code>git commit -m &quot;Começo do projeto&quot;&lt;/code> (adiciona o commit com a mensagem &quot;Começo do&#xD;
                        projeto&quot;)&lt;br />&#xD;
                        &lt;code>git push origin main&lt;/code> (envia o commit para o repositório do GitHub)&#xD;
                    &lt;/li>&#xD;
                    &lt;li>&#xD;
                        Caso o projeto não exista:&lt;br />&#xD;
                        Baixe a estrutura do projeto do SpinOff, disponível em &lt;a class=&quot;elementLink&quot;&#xD;
                        href=&quot;./../../../processo_agile/workproducts/estrutura_projeto_ED6A8C8B.html&quot;&#xD;
                        guid=&quot;_uYnrgGcUEee6Z8sC_73hQw&quot;>Estrutura do Projeto&lt;/a> .&lt;br />&#xD;
                        Extraia os arquivos do projeto e cole na pasta que acabamos de clonar.&lt;br />&#xD;
                        Em seguida, no Git Bash/Terminal, digite os comandos:&lt;br />&#xD;
                        &lt;code>git add .&lt;/code> (adiciona todos os arquivos)&lt;br />&#xD;
                        &lt;code>git commit -m &quot;Começo do projeto&quot;&lt;/code> (adiciona o commit com a mensagem &quot;Começo do&#xD;
                        projeto&quot;)&lt;br />&#xD;
                        &lt;code>git push origin main&lt;/code> (envia o commit para o repositório do GitHub)&#xD;
                    &lt;/li>&#xD;
                &lt;/ul>&#xD;
            &lt;/li>&#xD;
        &lt;/ol>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Adicionando templates de Pull Request e Issues:&lt;/b>&lt;br />&#xD;
        &lt;ol>&#xD;
            &lt;li>&#xD;
                Utilizando os templates base que estão disponíveis em &lt;a class=&quot;elementLink&quot;&#xD;
                href=&quot;./../../../processo_agile/workproducts/rm_5A6327CB.html&quot; guid=&quot;_I3MuAGcTEeelx-d4QgVk5A&quot;>Requisição de&#xD;
                Mudanças&lt;/a>, crie os campos necessários para o seu projeto.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Para adicionar ao GitHub, siga as instruções contidas em &lt;a&#xD;
                href=&quot;https://docs.github.com/pt/communities/using-templates-to-encourage-useful-issues-and-pull-requests/creating-a-pull-request-template-for-your-repository&quot;>&#xD;
                https://docs.github.com/pt/communities/using-templates-to-encourage-useful-issues-and-pull-requests/creating-a-pull-request-template-for-your-repository&lt;/a>&#xD;
            &lt;/li>&#xD;
        &lt;/ol>&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;h3>&#xD;
    2. Por padrão, temos 3 branches fixas e 2 tipos de branches dinâmicas:&#xD;
&lt;/h3>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;b>Main / Master:&lt;/b>&lt;br />&#xD;
        Essa é a branch principal, que será utilizada em produção, sendo que nela são feitas as tags de versão, seguindo o&#xD;
        padrão de versionamento semântico.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Develop:&lt;/b>&lt;br />&#xD;
        Branch de desenvolvimento, onde são feitas as junções de features prontas.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Release:&lt;/b>&lt;br />&#xD;
        Branch de publicação, onde são feitas as correções finais antes de subir para produção.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Feature:&lt;/b>&lt;br />&#xD;
        Para o desenvolvimento de novas funcionalidades, utilizaremos uma branch específica para esta requisição de&#xD;
        mudança. Para cada mudança, é feita uma nova branch.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>BugFix/HotFix:&lt;/b>&lt;br />&#xD;
        Para correções de bugs, criaremos uma branch a partir da Main com o intuito de resolver o problema. Para cada&#xD;
        correção, é feita uma nova branch.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    3. Pull Request:&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    No Git, para levar as mudanças de uma branch para outra, utilizamos o Merge. Porém, no GitHub, utilizaremos um recurso&#xD;
    chamado Pull Request. Aqui, ao invés de criarmos o merge diretamente, iremos expressar a intenção de criar o merge.&#xD;
    Isso possibilita que o time de revisão possa ver as mudanças e discuti-las. Após a aprovação das mudanças, é possível&#xD;
    criar o merge diretamente no GitHub.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    1. Passos para a criação de um Pull Request:&#xD;
&lt;/h4>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        Entrar no repositório desejado no GitHub&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Clique na aba &quot;Pull Requests&quot;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Clique no botão &quot;New Pull Request&quot;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Selecione a branch destino e a branch base e clique em &quot;Create Pull Request&quot;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Será exibido o template de Pull Request adicionado anteriormente. Preencha da forma adequada e clique em &quot;Create&#xD;
        Pull Request&quot;&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;h3>&#xD;
    4. GitFlow:&#xD;
&lt;/h3>&#xD;
&lt;h4>&#xD;
    1. Caso de Desenvolvimento de Nova Funcionalidade:&#xD;
&lt;/h4>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        Criar branch a partir da develop com o nome da funcionalidade, seguindo o a &lt;a class=&quot;elementLink&quot;&#xD;
        href=&quot;./../../../processo_agile/guidances/guidelines/guia_politicas_gc_10E280CE.html&quot;&#xD;
        guid=&quot;_kivfQKdcEeq1ProniyDKWg&quot;>Guia - Politicas de GC&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Desenvolver as funcionalidades&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Fazer commit que descreva o que foi feito (sempre commits pequenos, que englobem 1 mudança)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Realizar rodada de testes&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Fazer o merge local com o develop e testar localmente&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Criar um Pull Request (PR), preenchendo o template. Caso exista, linkar ao issue criado &#xD;
        &lt;ol>&#xD;
            &lt;li>&#xD;
                No Pull Request, aguardar aprovação e revisão.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Realizar o merge na branch Develop&#xD;
            &lt;/li>&#xD;
        &lt;/ol>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Crie uma tag, seguindo o padrão de versionamento semântico&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Realize a exclusão da branch feature após a conclusão.&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;h4>&#xD;
    2. Caso de HotFix:&#xD;
&lt;/h4>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        Criar branch a partir da main com o nome da correção, seguindo o a &lt;a class=&quot;elementLink&quot;&#xD;
        href=&quot;./../../../processo_agile/guidances/guidelines/guia_politicas_gc_10E280CE.html&quot;&#xD;
        guid=&quot;_kivfQKdcEeq1ProniyDKWg&quot;>Guia - Politicas de GC&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Realizar as correções necessárias&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Realizar o merge local com o develop e testar localmente&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Criar um Pull Request (PR) para a branch Main e para a Develop, preenchendo o template. Caso exista, linkar ao&#xD;
        issue criado &#xD;
        &lt;ol>&#xD;
            &lt;li>&#xD;
                No Pull Request, aguardar aprovação e revisão.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Realizar o merge na branch Develop&#xD;
            &lt;/li>&#xD;
        &lt;/ol>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Crie o tag de &lt;b>release&lt;/b>, seguindo o padrão de versionamento semântico&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Realize a exclusão da branch hotfix após a conclusão.&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;h4>&#xD;
    3. Caso de Lançamento (Release):&#xD;
&lt;/h4>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        Criar branch a partir da Develop com o nome da release, seguindo o a &lt;a class=&quot;elementLink&quot;&#xD;
        href=&quot;./../../../processo_agile/guidances/guidelines/guia_politicas_gc_10E280CE.html&quot;&#xD;
        guid=&quot;_kivfQKdcEeq1ProniyDKWg&quot;>Guia - Politicas de GC&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Realizar as correções necessárias&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Criar um Pull Request (PR) para a branch Main e para a Develop, preenchendo o template. Caso exista, linkar ao&#xD;
        issue criado &#xD;
        &lt;ol>&#xD;
            &lt;li>&#xD;
                No Pull Request, aguardar aprovação e revisão.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Realizar o merge nas branches Main e Develop&#xD;
            &lt;/li>&#xD;
        &lt;/ol>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Crie o tag de &lt;b>release&lt;/b>, seguindo o padrão de versionamento semântico&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Realize a exclusão da branch release após a conclusão.&#xD;
    &lt;/li>&#xD;
&lt;/ol></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
