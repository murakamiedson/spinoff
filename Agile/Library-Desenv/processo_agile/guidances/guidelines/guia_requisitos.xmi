<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmi:id="-f095a8dhKlYCoZNNvnexzg" name="guia_requisitos,_7QQV8KDuEeqZReOXvi3sdQ" guid="-f095a8dhKlYCoZNNvnexzg" changeDate="2024-06-18T19:53:31.573-0300">
  <mainDescription>&lt;p>&#xD;
    &lt;strong>&lt;font size=&quot;4&quot;>Requisitos de Sistema&lt;/font>&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Os requisitos de sistema de software são classificados frequentemente como funcionais e não funcionais (SOMMERVILLE,&#xD;
    2019):&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;strong>Requisitos funcionais&lt;/strong> - são declarações dos serviços que o sistema deve fornecer, do modo como o&#xD;
    sistema deve reagir a determinadas entradas e como deve se comportar em determinadas situações. Em alguns casos os&#xD;
    requisitos funcionais também podem declarar explicitamente o que o sistema não deve fazer.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;strong>Requisitos não funcionais&lt;/strong>&amp;nbsp; - São restrições sobre os serviços ou funções oferecidas pelo sistema.&#xD;
    Eles incluem restrições de tempo, restrições sobre o processo de desenvolvimento e restrições impostas por padrões. Os&#xD;
    requisitos não funcionais se aplicam, frequentemente, ao sistema como um tudo, em vez de às características individuais&#xD;
    ou aos serviços.&#xD;
&lt;/p>&#xD;
&lt;br />&#xD;
&lt;p>&#xD;
    Dependendo do autor os requisitos podem ser classificados de diversas maneiras.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Uma maneira de categorizá-los é descrita como o modelo &lt;strong>FURPS+&lt;/strong> [GRAD, 1992].&amp;nbsp;FURPS+ é um sistema&#xD;
    para a classificação de requisitos, o acrônimo representa categorias que podem ser usadas na definição de requisitos,&#xD;
    assim como representa atributos de Qualidade de Software, sendo ele parte do Rational Unified Process (RUP):&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;strong>F&lt;/strong>unctionality (&lt;strong>Funcionalidade&lt;/strong>) – representa todo aspecto funcional do software, ou&#xD;
    seja seus requisitos. É uma categoria com diversas subcategorias que variam de acordo com a aplicação. Sua medição&#xD;
    considera, principalmente, o cumprimento dos requesitos especificados.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;strong>U&lt;/strong>sability (&lt;strong>Usabilidade&lt;/strong>) – é o atributo que avalia a interface com o usuário. Possui&#xD;
    diversas subcategorias, entre elas: prevenção de erros; estética e design; ajudas (Help) e documentação; consistência e&#xD;
    padrões.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;strong>R&lt;/strong>eliability (&lt;strong>Confiabilidade&lt;/strong>) – refere-se a integridade, conformidade e&#xD;
    interoperabilidade do software. Os requisitos a serem considerados são: freqüência e gravidade de falha; possibilidade&#xD;
    de recuperação; possibilidade de previsão; exatidão; tempo médio entre falhas (MTBF).&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;strong>P&lt;/strong>erformance (&lt;strong>Desempenho&lt;/strong>) – avalia os requisitos de desempenho do software. Podendo&#xD;
    usar como medida diversos aspectos, entre eles: tempo de resposta, consumo de memória, utilização da CPU, capacidade de&#xD;
    carga e disponibilidade da aplicação.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;strong>S&lt;/strong>upportability (&lt;strong>Suportabilidade&lt;/strong>) – os requisitos de suportabilidade agrupam várias&#xD;
    características, como: testabilidade, adaptabilidade, manutenibilidade, compatibilidade, configurabilidade,&#xD;
    instalabilidade, escalabilidade, localizabilidade entre outros.&#xD;
&lt;/p>&#xD;
&lt;br />&#xD;
&lt;p>&#xD;
    O &lt;strong>“+”&lt;/strong> do acrônimo engloba outros requisitos não funcionais que devem ser lembrados:&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;strong>Requisitos de design (desenho)&lt;/strong> – Um requisito de design, frequentemente chamado de uma restrição de&#xD;
    design, especifica ou restringe o design de um sistema. Exemplos podem incluir: linguagens de programação, processo de&#xD;
    software, uso de ferramentas de desenvolvimento, biblioteca de classes, etc.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;br />&#xD;
    &lt;strong>Requisitos de implementação&lt;/strong> – Um requisito de implementação especifica ou restringe o código ou a&#xD;
    construção de um sistema. Como exemplos, podemos citar:&lt;br />&#xD;
    . padrões obrigatórios;&lt;br />&#xD;
    . linguagens de implementação;&lt;br />&#xD;
    . políticas de integridade de banco de dados;&lt;br />&#xD;
    . limites de recursos;&lt;br />&#xD;
    . ambientes operacionais.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;br />&#xD;
    &lt;strong>Requisitos de interface&lt;/strong> – especifica ou restringe as funcionalidades inerentes a interface do sistema&#xD;
    com usuário.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;br />&#xD;
    &lt;strong>Requisitos físicos&lt;/strong> – especifica uma limitação física pelo hardware utilizado, por exemplo: material,&#xD;
    forma, tamanho ou peso. Podendo representar requisitos de hardware, como as configurações físicas de rede&#xD;
    obrigatórias.&lt;br />&#xD;
    &lt;br />&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
