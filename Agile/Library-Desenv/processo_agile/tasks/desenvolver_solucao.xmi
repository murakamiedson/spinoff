<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:TaskDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmi:id="-f3yqiDOhk0TUCvst3dFqYQ" name="desenvolver_solucao,_hHeDQAKxEeWATcZB-Nzoyg" guid="-f3yqiDOhk0TUCvst3dFqYQ">
  <sections xmi:id="_rP8ioLraEeqXnJeLPcJWJw" name="Modelar solução" guid="_rP8ioLraEeqXnJeLPcJWJw">
    <sectionDescription>&lt;p>&#xD;
    O Desenvolvedor,&amp;nbsp;a partir das &lt;strong>Especificações de Caso de Uso&lt;/strong> deve analisar e projetar soluções&#xD;
    para implementar a melhor solução.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A modelagem consiste da análise do problema e projeto da solução. Deve-se criar um diagrama de classes com as classes&#xD;
    (entidades) que são efetivamente utilizadas pelo caso de uso. Para isso crie um diagrama para cada caso de uso.&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_xs1mAB3EEe-zOOCkt0QYLQ" name="Criar testes" guid="_xs1mAB3EEe-zOOCkt0QYLQ">
    <sectionDescription>&lt;p>&#xD;
    O primeiro passo no ciclo TDD é escrever um teste que falhe e&amp;nbsp;definir o comportamento desejado da funcionalidade&#xD;
    ainda não&amp;nbsp;implementada​, conforme o &lt;a class=&quot;elementLink&quot; href=&quot;./../../processo_agile/guidances/guidelines/guia_desenvolvimento_orientado_a _testes_443711A0.html&quot; guid=&quot;_A6A5ICitEe-I1r8bTfCNhw&quot;>Guia de Desenvolvimento Orientado a Testes&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Se houver componentes que ainda não foram implementados, o desenvolvedor deve criar componentes&amp;nbsp;falsos (mocks)&#xD;
    para simular esses elementos, permitindo que os testes sejam executados de maneira eficaz desde o início.&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_kTuk8B3GEe-zOOCkt0QYLQ" name="Codificar solução" guid="_kTuk8B3GEe-zOOCkt0QYLQ">
    <sectionDescription>&lt;p>&#xD;
    No segundo passo, o objetivo é fazer o teste passar, &lt;strong>evitando preocupações com a qualidade ou&#xD;
    otimização&lt;/strong> do código. Ver o &lt;a class=&quot;elementLink&quot; href=&quot;./../../processo_agile/guidances/guidelines/guia_desenvolvimento_orientado_a _testes_443711A0.html&quot; guid=&quot;_A6A5ICitEe-I1r8bTfCNhw&quot;>Guia de Desenvolvimento Orientado a Testes&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A codificação deve ser fiel à implementação e padrões definidos na Arquitetura,&amp;nbsp;&lt;a class=&quot;elementLink&quot; href=&quot;./../../processo_agile/workproducts/modelo_arquitetura_4779B597.html&quot; guid=&quot;_9UCO0Gb8Eeelx-d4QgVk5A&quot;>Modelo de Arquitetura&lt;/a>&amp;nbsp;e &lt;a class=&quot;elementLink&quot; href=&quot;./../../processo_agile/workproducts/guia_implementação_E3C99C55.html&quot; guid=&quot;_vlXKQGb6Eeelx-d4QgVk5A&quot;>Guia de Implementação&lt;/a> (documentos de padrões e&amp;nbsp;boas práticas de codificação, a&amp;nbsp;nomeação das classes, métodos e&#xD;
    atributos e respectivos empacotamentos).&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_4DsvgB3GEe-zOOCkt0QYLQ" name="Refatorar solução" guid="_4DsvgB3GEe-zOOCkt0QYLQ">
    <sectionDescription>&lt;p>&#xD;
    O ultimo passo&amp;nbsp;é refatorar o código. Isso envolve eliminar duplicações e melhorar a estrutura do código sem&#xD;
    alterar seu comportamento. O objetivo é manter o código limpo e sustentável para futuras modificações​.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Este ciclo de &quot;&lt;strong>Red-Green-Refactor&lt;/strong>&quot; é repetido até que a funcionalidade esteja completa e todos os&#xD;
    problemas corrigidos, conforme o &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../processo_agile/guidances/guidelines/guia_desenvolvimento_orientado_a _testes_443711A0.html&quot;&#xD;
    guid=&quot;_A6A5ICitEe-I1r8bTfCNhw&quot;>Guia de Desenvolvimento Orientado a Testes&lt;/a>.&#xD;
&lt;/p></sectionDescription>
  </sections>
</org.eclipse.epf.uma:TaskDescription>
